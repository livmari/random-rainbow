{"version":3,"sources":["components/RainbowButton/RainbowButton.js","components/RainbowCode/RainbowCode.js","components/RainbowSquare/RainbowSquare.js","util/generateColorValue.js","util/generateDegree.js","util/updateBackground.js","util/updateTextColor.js","App.js","reportWebVitals.js","index.js"],"names":["RainbowButton","props","onClick","handleClick","id","className","RainbowCode","darkestColor","gradient","RainbowSquare","generateColorValue","Math","floor","random","generateDegree","value","toString","updateBackground","document","getElementById","style","background","updateTextColor","rgb","color","App","state","firstColor","red","green","blue","secondColor","degree","setColors","bind","setDarkestColor","updateUi","firstRed","firstGreen","firstBlue","firstRgb","secondRed","secondGreen","secondBlue","secondRgb","this","setState","prevState","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7ab1683a.chunk.js","sourcesContent":["import React from 'react'\n\nconst RainbowButton = props => {\n  return (\n    <button\n      onClick={props.handleClick}\n      id={props.id}\n      className={'focus:outline-none font-medium mt-4 py-5 px-4 text-lg'}\n    >\n      Click me to create a new rainbow\n    </button>\n  )\n}\n\nexport default RainbowButton\n","import React from 'react'\n\nconst RainbowCode = props => {\n  return (\n    <div\n      className={\n        'text-gray-500 rounded-xl shadow-sm bg-gray-50 my-5 p-6 md:p-10'\n      }\n    >\n      <ul>\n        <li>background: {props.darkestColor};</li>\n        <li>background: -moz-{props.gradient};</li>\n        <li>background: -webkit-{props.gradient};</li>\n        <li>background: {props.gradient};</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default RainbowCode\n","import React from 'react'\n\nimport './RainbowSquare.css'\n\nconst RainbowSquare = props => {\n  return (\n    <div\n      onClick={props.handleClick}\n      id={props.id}\n      className={'rainbow-square h-3/6 rounded-xl shadow-sm'}\n    />\n  )\n}\n\nexport default RainbowSquare\n","const generateColorValue = () => {\n  return Math.floor(Math.random() * Math.floor(255))\n}\n\nexport default generateColorValue\n","const generateDegree = () => {\n  let value = Math.floor(Math.random() * Math.floor(360))\n\n  return `${value.toString()}deg`\n}\n\nexport default generateDegree\n","const updateBackground = (id, gradient) => {\n  let element = document.getElementById(id)\n  element.style.background = gradient\n}\n\nexport default updateBackground\n","const updateTextColor = (id, rgb) => {\n  let element = document.getElementById(id)\n  element.style.color = rgb\n}\n\nexport default updateTextColor\n","import React from 'react'\nimport './App.css'\nimport { RainbowButton, RainbowCode, RainbowSquare } from './components'\nimport {\n  generateColorValue,\n  generateDegree,\n  updateBackground,\n  updateTextColor,\n} from './util'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      firstColor: { red: 0, green: 0, blue: 0, rgb: 'rgb(0, 0, 0)' },\n      secondColor: { red: 0, green: 0, blue: 0, rgb: 'rgb(0, 0, 0)' },\n      darkestColor: 'rgb(0, 0, 0)',\n      degree: '0deg',\n      gradient: 'linear-gradient(0deg, rgb(0, 0, 0) 0%, rgb(0, 0, 0) 100%)',\n    }\n\n    this.setColors = this.setColors.bind(this)\n    this.setDarkestColor = this.setDarkestColor.bind(this)\n    this.updateUi = this.updateUi.bind(this)\n  }\n\n  async setColors() {\n    let firstRed = generateColorValue(),\n      firstGreen = generateColorValue(),\n      firstBlue = generateColorValue(),\n      firstRgb = `rgb(${firstRed}, ${firstGreen}, ${firstBlue})`,\n      secondRed = generateColorValue(),\n      secondGreen = generateColorValue(),\n      secondBlue = generateColorValue(),\n      secondRgb = `rgb(${secondRed}, ${secondGreen}, ${secondBlue})`\n\n    do {\n      secondRed = generateColorValue()\n      secondGreen = generateColorValue()\n      secondBlue = generateColorValue()\n      secondRgb = `rgb(${secondRed}, ${secondGreen}, ${secondBlue})`\n    } while (firstRgb === secondRgb)\n\n    await this.setState(prevState => ({\n      firstColor: {\n        ...prevState.firstColor,\n        red: firstRed,\n        green: firstGreen,\n        blue: firstBlue,\n        rgb: firstRgb,\n      },\n      secondColor: {\n        ...prevState.secondColor,\n        red: secondRed,\n        green: secondGreen,\n        blue: secondBlue,\n        rgb: secondRgb,\n      },\n    }))\n  }\n\n  setDarkestColor() {\n    let firstSum =\n      this.state.firstColor.red +\n      this.state.firstColor.green +\n      this.state.firstColor.blue\n\n    let secondSum =\n      this.state.secondColor.red +\n      this.state.secondColor.green +\n      this.state.secondColor.blue\n\n    if (firstSum > secondSum)\n      this.setState({ darkestColor: this.state.secondColor.rgb })\n    else this.setState({ darkestColor: this.state.firstColor.rgb })\n  }\n\n  async updateUi() {\n    await this.setColors()\n\n    await this.setState({ degree: generateDegree() })\n\n    await this.setDarkestColor()\n\n    await this.setState({\n      gradient: `linear-gradient(${this.state.degree}, ${this.state.firstColor.rgb} 0%, ${this.state.secondColor.rgb} 100%)`,\n    })\n\n    await updateBackground('rainbowSquare', this.state.gradient)\n    await updateTextColor('rainbowBtn', this.state.darkestColor)\n  }\n\n  async componentDidMount() {\n    await this.updateUi()\n  }\n\n  render() {\n    return (\n      <div className='app bg-white'>\n        <div className={'container h-screen mx-auto align-middle p-6 sm:p-10 '}>\n          <RainbowSquare id={'rainbowSquare'} handleClick={this.updateUi} />\n          <RainbowButton id={'rainbowBtn'} handleClick={this.updateUi} />\n\n          <RainbowCode\n            darkestColor={this.state.darkestColor}\n            gradient={this.state.gradient}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}